q()
setwd("~/")
data1<-read.csv("sample data.csv")
data2<-data.frame(data1)
str(data2)
names(data2)
data1<-read.csv("sample data.csv")
data2<-data.frame(data1)
str(data2)
names(data2)
table(data2)
head(data2)
tail(data2)
View(data1)
setwd("~/")
data1<-read.csv("vocab.csv")
level(data1$vocab)
str(data1)
levels(data1$education)
data1$total_sum<-(data1$education+data1$vocabulary)
data1$mean<-(data1education+data$vocabulary)/2
data1$mean<-data1$education+data$vocabulary)/2
data1$mean<-(data1$education+data1$vocabulary)/2
summary(data1)
head(data1,n=10)
data1[1:10,1:3]
install.packages("reshape")
library(reshape)
data1<-rename(data1, c(education="educ"))
names(data1)
newdata<-data1[c(-1:3))]
newdata,-data1[(c-(1:3))]
newdata<-data1[c(-(1:3))]
newdata2<-subset(data1,sex="female")
names(newdata2)
names(newdata)
newdata2<-subset(data1, sex="Female")
newdata2<-subset(data1,sex=="Female")
levels(data1$education)
> data1$mean<-(data1$education+data1$vocabulary)/2
data1$mean<-(data1$education+data1$vocabulary)/2
data1$total_sum<-(data1$education+data1$vocabulary)
data1$total_sum<-(data1$edu+data1$vocabulary)
setwd("C:/Users/sanskriti/Downloads")
setwd("C:/Users/sanskriti/Documents/")
setwd("~/")
data1<-read.csv("vocab.csv")
summary(data1)
View(newdata)
data1<-read.csv("consolidated cash flow.csv")
data1<-read.csv("consolidated cash flow data.csv")
data1<-read.csv("consolidated cash flow data.csv")
data1<-read.csv("consolidated cashflow data.csv")
data2<-data.frame(data1)
str(data2)
acf(data2$cashflow)
acf(data2$casfflow)
acf(data2$cashflow)
head(data2)
acf(data2$Cashflow)
pacf(data2$Cashflow)
acf(data2$Cashflow)
pacf(data2$Cashflow)
ddata<-diff(data2$Cashflow)
ndifdata<-length(ddata)
plot.ts(1:ndifdata.ddata)
plot.ts(1:ndifdata,ddata)
par(mfrow=c(1,1))
acf(ddata)
pacf(ddata)
install.packages("forecast")
library("forecast")
fct<-arima(data2$Cashflow,order = c(1,0,1),seasonal =list(order= c(1,1,1),period =12),method = "ML")
summary(fct)
library("forecast")
fct<-arima(data2$Cashflow,order = c(1,0,1),seasonal =list(order= c(1,1,1),period =12),method = "ML")
summary(fct)
fct<-arima(data2$Cashflow,order = c(1,0,1),seasonal =list(order= c(1,1,1),period =12),method = "ML")
summary(fct)
data2$Forecast<-data2
data2$Forecast<-data2$Cashflow+fct$residuals
plot(data2$Cashflow,type="l",col="blue")
lines(data2$Forecast,col="red")
View(data2)
Deepti Miyan (to All - Entire Audience):
names(data2)
library("forecast") # load the "forecast" R library
timeseriesforecasts<-forecast.Arima(fct,h=12)
timeseriesforecasts
plot.forecast(timeseriesforecasts)
write.csv(data2,"arima_.csv")
data2$Forecast<-data2$Cashflow+fct$residuals
View(data2)
plot(data2$Cashflow,type="l",col="blue")
> lines(data2$Forecast,col="red")
lines(data2$Forecast,col="red")
plot.forecast(timeseriesforecasts)
write.csv(data2,"arima_.csv")
htmlCode
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readLines(con)
close(con)
htmlCode
?nchar
nchar(htmlCode[10])
nchar(htmlCode[20])
nchar(htmlCode[30])
nchar(htmlCode[100])
nchar(htmlCode c(10, 20, 30, 100))
nchar(htmlCode [c(10, 20, 30, 100))]
nchar(htmlCode [c(10, 20, 30, 100)])
con = url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
htmlCode = readLines(con)
close(con)
htmlCode
head (htmlCode, 1)
head (htmlCode, 5)
table1 <- htmlCode[5]
length(htmlCode)
table1 <- htmlCode[5:1258]
head(table1)
?strsplit
strsplit(table1[1])
strsplit(table1[1], split=" ")
strsplit(table1[1], split=" ")[12]
strsplit(table1[1], split=" ")[[12]
]
split1 <- strsplit(table1[1], split=" ")
split1 [12]
split1
split1[1][12]
split1[[1]][12]
strsplit(split1[[1]][12], split="-")
strsplit(split1[[1]][12], split="-")[[1]]
strsplit(split1[[1]][12], split="-")[[1]][1]
as.numeric(strsplit(split1[[1]][12], split="-")[[1]][1])
x=0; n=0; for(a in table1) { x = x+ as.numeric(strsplit(strsplit(a)[[1]][12], split=" "), split="-")[[1]][1]); n = n+1;}
x=0; n=0; for(a in table1) { x = x+ as.numeric(strsplit(strsplit(a,split=" ")[[1]][12],  split="-")[[1]][1]); n = n+1;}
x
?fix.txt
?read.fwf
v <- read.fwf(con, widths = c(-25,4), skip=4)
con = url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
v <- read.fwf(con, widths = c(-25,4), skip=4)
head(v)
v <- read.fwf(con, widths = c(-25,4,4,4), skip=4)
con = url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
v <- read.fwf(con, widths = c(-25,4,4,4), skip=4)
head(v)
con = url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
v <- read.fwf(con, widths = c(-24,4,4,4), skip=4)
head(v)
sum(as.numeric(v$V2))
myapp <- oauth_app("6ec9faa1ead5890c7219","be1b7ecd66fb61aca1fbc16da7fbd9121e761a02")
library(hhtr)
library("httr", lib.loc="~/R/win-library/3.0")
install.packages("httr")
library(hhtr)
library(httr)
myapp <- oauth_app("6ec9faa1ead5890c7219","be1b7ecd66fb61aca1fbc16da7fbd9121e761a02")
myapp <- oauth_app("github", 6ec9faa1ead5890c7219","be1b7ecd66fb61aca1fbc16da7fbd9121e761a02")
myapp <- oauth_app("6ec9faa1ead5890c7219","be1b7ecd66fb61aca1fbc16da7fbd9121e761a02")
github_token <- oauth2.0_token(github, myapp)
myapp <- oauth_app("github", key="6ec9faa1ead5890c7219","be1b7ecd66fb61aca1fbc16da7fbd9121e761a02")
myapp <- oauth_app("6ec9faa1ead5890c7219","be1b7ecd66fb61aca1fbc16da7fbd9121e761a02")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("httpuv")
library(httpuv)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
gtoken <- config(token = github_token)
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp), cache = FALSE
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache = FALSE
;
auth_endpoints("github")
library(httr)
auth_endpoints("github")
oauth_endpoints("github")
13 myapp <- oauth_app("github", "be1b7ecd66fb61aca1fbc16da7fbd9121e761a02")
myapp <- oauth_app("github", "be1b7ecd66fb61aca1fbc16da7fbd9121e761a02")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
myapp <- oauth_app("6ec9faa1ead5890c7219", "be1b7ecd66fb61aca1fbc16da7fbd9121e761a02")
library(httr)
myapp <- oauth_app("6ec9faa1ead5890c7219", "be1b7ecd66fb61aca1fbc16da7fbd9121e761a02")
github_token <- oauth2.0_token(oauth_endpoints("6ec9faa1ead5890c7219"), myapp)
oauth_endpoints("6ec9faa1ead5890c7219")
oauth_endpoints("github")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos"), gtoken)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
myapp <- oauth_app("github",key="6ec9faa1ead5890c7219",secret = "be1b7ecd66fb61aca1fbc16da7fbd9121e761a02")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
library(httpuv)
myapp <- oauth_app("github",key="6ec9faa1ead5890c7219",secret = "be1b7ecd66fb61aca1fbc16da7fbd9121e761a02")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
setwd("~/coursera/Getting data")
q3q1 <- read.table(getdata_data_ss06hid.csv)
q3q1 <- read.table("getdata_data_ss06hid.csv")
library(dplyr)
df1 <- tbl_df(q3q1)
head(df1)
select(df1, ACR, AGS)
agricultureLogical <- filter(df1, ACR == 6, AGS == 3)
?which
names(df1)
?df
tbl_df
df1
agricultureLogical <- (q3q1$ACR == 3 & data$AGS == 6)
agricultureLogical <- [q3q1$ACR == 3 & data$AGS == 6]
agricultureLogical <- q3q1$ACR == 3 & q3q1$AGS == 6
agricultureLogical
?which
a <- which(agricultureLogical)
a
data1 <- data.frame(q3q1)
agricultureLogical <- data1$ACR == 3 & data1$AGS == 6
agricultureLogical
dim(q3q1)
head(1)
head(q3q1)
data1 <- read.csv("getdata_data_ss06hid.csv")
head(data1)
agricultureLogical <- AGS == 6 & ACR == 3
agricultureLogical <- data1$AGS == 6 & data1$ACR == 3
which(agricultureLogical)
install.packages("jpeg")
library(jpeg)
readJPEG("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg")
readJPEG(https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg)
?readJPEG
readJPEG(https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg)
img <- readJPEG("getdata_jeff.jpg", native=SETTING)
img <- readJPEG("getdata_jeff.jpg")
img <- readJPEG("getdata_jeff.jpg", NATIVE = TRUE)
img <- readJPEG("getdata_jeff.jpg", native = TRUE)
summary(img)
??quantile
?decile
?quantile
quantile(img, c(.30, .80))
setwd("~/coursera/Getting data")
df1 <- read.csv("getdata_data_GDP.csv")
df2 <- read.csv("getdata_data_EDSTATS_Country.csv")
?match
head(df1)
head(df2)
names(df1)
names(df2)
df1$match <- match(df1$X, df2$CountryCode, nomatch=0)
names(df1)
a <- sum(df1$match)
a
head(df1)
?merge
merge(df1, df2, by.x = "X, by.y = "CountryCode")
merge(df1, df2, by.x = "X", by.y = "CountryCode")
merged <- merge(df1, df2, by.x = "X", by.y = "CountryCode")
head(df1)
rankdf <- subset(df1, !is.na(Ranking))
rankdf <- subset(df1, !is.na("Ranking"))
rankdf <- subset(df1, "Ranking">0)
rankdf <- subset(df1, "Ranking">0)
df3 <- df1[df1$Ranking > 0]
head(df3)
df3 <- df1[df1$Ranking > 0,]
data1 <- df1[!complete.cases(df1$Ranking),]
data2 <- df1[na.omit(df1$Ranking), ]
mydata <- df1[rowSums(is.na(df1$Ranking))==0, ]
mydata <- df1[df1$Ranking > 0, ]
head(df1)
names(df1)
gdp1 <- df1[df1$Gross.domestic.product.2012 > 0, ]
data2 <- df1[na.omit(df1$Gross.domestic.product.2012), ]
setwd("~/coursera/Getting data")
df1 <- read.csv("getdata_data_GDP.csv")
df2 <- read.csv("getdata_data_EDSTATS_Country.csv")
data1 <- df1[6:195,]
?merge
head(data1)
data1 <- df1[5:195,]
tail(data1)
data1 <- df1[5:194,]
head(data1)
tail(data1)
merged <- merge(data1, df2, by.x = "X", by.y = "CountryCode")
merged <- merge(data1, df2, by.x = "X", by.y = "CountryCode", all = TRUE)
merged <- merge(data1, df2, by.x = "X", by.y = "CountryCode")
?arrange
library(dplyr)
arrange(merged, desc(Gross.domestic.product.2012))
head(merged)
descGDP <- arrange(merged, desc(Gross.domestic.product.2012))
head(descGDP, 13)
tail(descGDP)
arrange(data1, desc(Gross.domestic.product.2012))
GDPrank <- arrange(data1, desc(Gross.domestic.product.2012))
head(GDPrank)
head(data1)
tail(data1)
library(dplyr)
order <-  arrange(data1, desc(Gross.domestic.product.2012))
head(order, 14)
data1[,2] = as.numeric(as.character(data1[,2]))
order <-  arrange(data1, desc(Gross.domestic.product.2012))
head(order, 14)
tail(data1)
tail(order)
head(order, 13)
names(merged)
?group_by
merged[,2] = as.numeric(as.character(merged[,2]))
by_incomegroup <- group_by(merged, Income.Group)
summarize(by_incomegroup, mean)
summarize(by_incomegroup)
mean(by_incomegroup)
merged %>%
group_by(Income.Group) %>%
select(Gross.domestic.product.2012) %>%
summarise(
GDP = mean(Gross.domestic.product.2012, na.rm = TRUE),
) %>%
?summarize
?summarize
summarize(by_incomegroup, mean(Gross.domestic.product.2012))
quantile <- merged %>% mutate(quartile = ntile(Gross.domestic.product.2012, 5))
names(quantile)
select(quantile, quartile==1 & Income.Group == "Lower middle income")
table1 = select(quantile, quartile==1 & Income.Group == "Lower middle income")
head (quantile)
table1 = filter(quantile, quartile == 1 & Income.Group == "Lower middle income")
swirl()
library(swirl)
swirl()
install.packages("tidyr")
